* General Settings
#+BEGIN_SRC emacs-lisp
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
;; they are implemented.


;; This is for forge to get the github token since their wizard seems to tbe broken
(setq auth-sources '("~/.authinfo"))

;; Bootstrap org mode publish
;; Move items to the trash
(setq delete-by-moving-to-trash t)
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)
#+END_SRC
** User Info
#+BEGIN_SRC emacs-lisp
;; clients, file templates and snippets.
(setq user-full-name "Joe Bellus"
    user-mail-address "joe@5sigma.com")
#+END_SRC
** Doom Settings
#+BEGIN_SRC emacs-lisp
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
(setq doom-font (font-spec :family "monospace" :size 14))

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one-light)
#+END_SRC
** YAS Snippets
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
#+END_SRC
** General Key Bindings
#+BEGIN_SRC emacs-lisp
(map! :leader :desc "Open Terminal" "ot" #'ansi-term)
#+END_SRC


* Org Mode
#+BEGIN_SRC emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq org-directory "~/Nextcloud/org")
(setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/Root/bin/x86_64-darwin/"))
#+END_SRC
** Clock Management
#+BEGIN_SRC emacs-lisp
(org-clock-persistence-insinuate)
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist t)
;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)
;; Change tasks to whatever when clocking in
(setq org-clock-in-switch-to-state "STRT")
;; Change states
;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)
;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)
;; use pretty things for the clocktable
(setq org-pretty-entities t)
;; If idle for more than 15 minutes, resolve the things by asking what to do
;; with the clock time
(setq org-clock-idle-time 15)
#+END_SRC
** Journal
#+BEGIN_SRC emacs-lisp
(customize-set-variable 'org-journal-dir "~/Nextcloud/org/entries")
(customize-set-variable 'org-journal-date-format "%A, %d %B %Y")
(require 'org-journal)
#+END_SRC
** Notes
#+BEGIN_SRC emacs-lisp
#+END_SRC
** Publishing
*** Bootstrap Publishing
#+BEGIN_SRC emacs-lisp
(setq org-publish-project-alist
    '(("org-notes"
        :base-directory "~/Nextcloud/org/"
        :publishing-directory "~/public_html/"
        :publishing-function org-twbs-publish-to-html
        :with-sub-superscript nil
        )))
#+END_SRC
*** DND
#+BEGIN_SRC emacs-lisp
 (require 'ox-dnd)
#+END_SRC

* External Syncing
** Jira
#+BEGIN_SRC emacs-lisp
(setq jiralib-url "https://quikserve.atlassian.net")
#+END_SRC
* Language Settings
** Elixir
#+BEGIN_SRC emacs-lisp
(add-hook 'elixir-mode-hook
        (lambda () (add-hook 'before-save-hook 'elixir-format nil t)))


(add-to-list 'auto-mode-alist '("\\.leex\\'" . web-mode))
#+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp
(add-hook 'racer-mode-hook #'company-mode)
(require 'rust-mode)
(define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
(setq company-tooltip-align-annotations t)
#+END_SRC
** Typescript
#+BEGIN_SRC emacs-lisp
;; (add-hook 'before-save-hook 'tide-format-before-save)
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1))

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)

;; formats the buffer before saving
(add-hook 'before-save-hook 'tide-format-before-save)

(add-hook 'typescript-mode-hook #'setup-tide-mode)
#+END_SRC
** Go
#+BEGIN_SRC emacs-lisp
#+END_SRC
** Web Mode
#+BEGIN_SRC emacs-lisp
 (setq web-mode-markup-indent-offset 2)
 (setq web-mode-code-indent-offset 2)
#+END_SRC
